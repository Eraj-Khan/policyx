{"ast":null,"code":"var _jsxFileName = \"/home/xloop/Desktop/chat/frontend/src/component/Popchat.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react'\n// //import the css here\n\n// const PopChat = ( props ) => {\n\n//   const [ msg, setMsg ] = useState();\n//   let hide = {\n//     display: 'none',\n//   }\n//   let show = {\n//     display: 'block'\n//   }\n//   // let textRef = React.createRef()\n//   const {messages} = props\n//   console.log(messages)\n\n//   const [chatopen, setChatopen] = useState(false)\n//   const toggle = e => {\n//     setChatopen(!chatopen)\n//   }\n\n// const handleSend = e => {\n//   const get = props.getMessage\n//   get(msg)\n// }\n\n// // useEffect(() => {\n// //   if(messages){\n// //     setMsg(messages)\n// //   }\n// // },[messages])\n\n//   return (\n//     <div id='chatCon'>\n//       <div class=\"chat-box\" style={chatopen ? show : hide}>\n//     <div class=\"header\">Chat with me</div>\n//     <div class=\"msg-area\">\n//       {\n//        messages?.length > 0 && messages.map((msg, i) => (\n//           msg.type === 'query' ? (\n//           <p class=\"right\"><span>{ msg.value }</span></p>\n//           ) : (\n//             <p class=\"left\"><span>{ msg.value }</span></p>\n//           )\n//         ))\n//       }\n\n//     </div>\n//     <div class=\"footer\">\n//       <input type=\"text\"  onChange={(e)=> setMsg(e.target.value)} />\n//       <button onClick={handleSend}>send</button>\n//     </div>\n//   </div>\n//     <div class=\"pop\">\n//       <p><img onClick={toggle} src=\"https://p7.hiclipart.com/preview/151/758/442/iphone-imessage-messages-logo-computer-icons-message.jpg\" alt=\"\" /></p>\n//     </div>\n//     </div>\n//   )\n// }\n\n// export default PopChat  \n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopChat = props => {\n  _s();\n  const [inputMsg, setInputMsg] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [chatopen, setChatopen] = useState(false);\n  const toggle = () => {\n    setChatopen(!chatopen);\n  };\n  const handleSend = () => {\n    // Send the inputMsg to the backend or perform the necessary action\n    const newMessage = {\n      type: 'query',\n      value: inputMsg\n    };\n    setChatHistory([...chatHistory, newMessage]);\n    setInputMsg('');\n  };\n  useEffect(() => {\n    // You can update chat history based on the messages prop from the parent component\n    if (props.messages) {\n      setChatHistory([...chatHistory, ...props.messages]);\n    }\n  }, [chatHistory, props.messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chatCon\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      style: chatopen ? {\n        display: 'block'\n      } : {\n        display: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"Chat with me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg-area\",\n        children: chatHistory.map((msg, i) => msg.type === 'query' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: msg.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 44\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"left\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: msg.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 43\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMsg,\n          onChange: e => setInputMsg(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pop\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: toggle,\n          src: \"https://p7.hiclipart.com/preview/151/758/442/iphone-imessage-messages-logo-computer-icons-message.jpg\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(PopChat, \"RwpMamfnlrmKW8V6EuZXCpBzw/8=\");\n_c = PopChat;\nexport default PopChat;\n\n// src/components/PopChat.js\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios'; // Ensure you have axios installed\n\n// const PopChat = (props) => {\n//   let hide = { display: 'none' };\n//   let show = { display: 'block' };\n//   let textRef = React.createRef();\n//   const [chatopen, setChatopen] = useState(false);\n//   const [messages, setMessages] = useState(props.messages || []);\n\n//   useEffect(() => {\n//     // Load existing messages when the component mounts\n//     loadMessages();\n//   }, []);\n\n//   const loadMessages = async () => {\n//     try {\n//       const response = await axios.get('http://127.0.0.1:8000/answer/'); // Replace with your Django backend URL and endpoint for fetching messages\n//       setMessages(response.data);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   const toggle = () => {\n//     setChatopen(!chatopen);\n//   };\n\n//   // const handleSend = async () => {\n//   //   try {\n//   //     const message = textRef.current.value;\n//   //     const response = await axios.post('http://127.0.0.1:8000/answer/response/', { message }); // Replace with your Django backend URL and endpoint for sending messages\n//   //     if (response.status === 201) {\n//   //       setMessages([...messages, message]);\n//   //       textRef.current.value = ''; // Clear input after sending\n//   //     }\n//   //   } catch (error) {\n//   //     console.error('Error sending message:', error);\n//   //   }\n//   // };\n\n//   return (\n//     <div id='chatCon'>\n//       <div className=\"chat-box\" style={chatopen ? show : hide}>\n//         <div className=\"header\">Chat with me</div>\n//         <div className=\"msg-area\">\n//           {messages?.length > 0 &&\n//             messages.map((msg, i) => (\n//               i % 2 ? (\n//                 <p className=\"right\" key={i}><span>{msg}</span></p>\n//               ) : (\n//                 <p className=\"left\" key={i}><span>{msg}</span></p>\n//               )\n//             ))\n//           }\n//         </div>\n//         <div className=\"footer\">\n//           <input type=\"text\" ref={textRef} />\n//           <button onClick={handleSend}><i className=\"fa fa-paper-plane\"></i></button>\n//         </div>\n//       </div>\n//       <div className=\"pop\">\n//         <p><img onClick={toggle} src=\"https://p7.hiclipart.com/preview/151/758/442/iphone-imessage-messages-logo-computer-icons-message.jpg\" alt=\"\" /></p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PopChat;\nvar _c;\n$RefreshReg$(_c, \"PopChat\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PopChat","props","_s","inputMsg","setInputMsg","chatHistory","setChatHistory","chatopen","setChatopen","toggle","handleSend","newMessage","type","value","messages","id","children","className","style","display","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","onChange","e","target","onClick","src","alt","_c","$RefreshReg$"],"sources":["/home/xloop/Desktop/chat/frontend/src/component/Popchat.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\n// //import the css here\n\n// const PopChat = ( props ) => {\n\n//   const [ msg, setMsg ] = useState();\n//   let hide = {\n//     display: 'none',\n//   }\n//   let show = {\n//     display: 'block'\n//   }\n//   // let textRef = React.createRef()\n//   const {messages} = props\n//   console.log(messages)\n\n//   const [chatopen, setChatopen] = useState(false)\n//   const toggle = e => {\n//     setChatopen(!chatopen)\n//   }\n\n// const handleSend = e => {\n//   const get = props.getMessage\n//   get(msg)\n// }\n\n// // useEffect(() => {\n// //   if(messages){\n// //     setMsg(messages)\n// //   }\n// // },[messages])\n\n//   return (\n//     <div id='chatCon'>\n//       <div class=\"chat-box\" style={chatopen ? show : hide}>\n//     <div class=\"header\">Chat with me</div>\n//     <div class=\"msg-area\">\n//       {\n//        messages?.length > 0 && messages.map((msg, i) => (\n//           msg.type === 'query' ? (\n//           <p class=\"right\"><span>{ msg.value }</span></p>\n//           ) : (\n//             <p class=\"left\"><span>{ msg.value }</span></p>\n//           )\n//         ))\n//       }\n\n//     </div>\n//     <div class=\"footer\">\n//       <input type=\"text\"  onChange={(e)=> setMsg(e.target.value)} />\n//       <button onClick={handleSend}>send</button>\n//     </div>\n//   </div>\n//     <div class=\"pop\">\n//       <p><img onClick={toggle} src=\"https://p7.hiclipart.com/preview/151/758/442/iphone-imessage-messages-logo-computer-icons-message.jpg\" alt=\"\" /></p>\n//     </div>\n//     </div>\n//   )\n// }\n\n// export default PopChat  \n\nimport React, { useState, useEffect } from 'react';\n\nconst PopChat = (props) => {\n  const [inputMsg, setInputMsg] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [chatopen, setChatopen] = useState(false);\n\n  const toggle = () => {\n    setChatopen(!chatopen);\n  };\n\n  const handleSend = () => {\n    // Send the inputMsg to the backend or perform the necessary action\n    const newMessage = { type: 'query', value: inputMsg };\n    setChatHistory([...chatHistory, newMessage]);\n    setInputMsg('');\n  };\n\n  useEffect(() => {\n    // You can update chat history based on the messages prop from the parent component\n    if (props.messages) {\n      setChatHistory([...chatHistory, ...props.messages]);\n    }\n  }, [chatHistory, props.messages]);\n\n  return (\n    <div id='chatCon'>\n      <div className=\"chat-box\" style={chatopen ? { display: 'block' } : { display: 'none' }}>\n        <div className=\"header\">Chat with me</div>\n        <div className=\"msg-area\">\n          {chatHistory.map((msg, i) => (\n            msg.type === 'query' ? (\n              <p key={i} className=\"right\"><span>{msg.value}</span></p>\n            ) : (\n              <p key={i} className=\"left\"><span>{msg.value}</span></p>\n            )\n          ))}\n        </div>\n        <div className=\"footer\">\n          <input type=\"text\" value={inputMsg} onChange={(e) => setInputMsg(e.target.value)} />\n          <button onClick={handleSend}>send</button>\n        </div>\n      </div>\n      <div className=\"pop\">\n        <p><img onClick={toggle} src=\"https://p7.hiclipart.com/preview/151/758/442/iphone-imessage-messages-logo-computer-icons-message.jpg\" alt=\"\" /></p>\n      </div>\n    </div>\n  );\n};\n\nexport default PopChat;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/components/PopChat.js\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios'; // Ensure you have axios installed\n\n// const PopChat = (props) => {\n//   let hide = { display: 'none' };\n//   let show = { display: 'block' };\n//   let textRef = React.createRef();\n//   const [chatopen, setChatopen] = useState(false);\n//   const [messages, setMessages] = useState(props.messages || []);\n\n//   useEffect(() => {\n//     // Load existing messages when the component mounts\n//     loadMessages();\n//   }, []);\n\n//   const loadMessages = async () => {\n//     try {\n//       const response = await axios.get('http://127.0.0.1:8000/answer/'); // Replace with your Django backend URL and endpoint for fetching messages\n//       setMessages(response.data);\n//     } catch (error) {\n//       console.error('Error fetching messages:', error);\n//     }\n//   };\n\n//   const toggle = () => {\n//     setChatopen(!chatopen);\n//   };\n\n//   // const handleSend = async () => {\n//   //   try {\n//   //     const message = textRef.current.value;\n//   //     const response = await axios.post('http://127.0.0.1:8000/answer/response/', { message }); // Replace with your Django backend URL and endpoint for sending messages\n//   //     if (response.status === 201) {\n//   //       setMessages([...messages, message]);\n//   //       textRef.current.value = ''; // Clear input after sending\n//   //     }\n//   //   } catch (error) {\n//   //     console.error('Error sending message:', error);\n//   //   }\n//   // };\n\n//   return (\n//     <div id='chatCon'>\n//       <div className=\"chat-box\" style={chatopen ? show : hide}>\n//         <div className=\"header\">Chat with me</div>\n//         <div className=\"msg-area\">\n//           {messages?.length > 0 &&\n//             messages.map((msg, i) => (\n//               i % 2 ? (\n//                 <p className=\"right\" key={i}><span>{msg}</span></p>\n//               ) : (\n//                 <p className=\"left\" key={i}><span>{msg}</span></p>\n//               )\n//             ))\n//           }\n//         </div>\n//         <div className=\"footer\">\n//           <input type=\"text\" ref={textRef} />\n//           <button onClick={handleSend}><i className=\"fa fa-paper-plane\"></i></button>\n//         </div>\n//       </div>\n//       <div className=\"pop\">\n//         <p><img onClick={toggle} src=\"https://p7.hiclipart.com/preview/151/758/442/iphone-imessage-messages-logo-computer-icons-message.jpg\" alt=\"\" /></p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PopChat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}